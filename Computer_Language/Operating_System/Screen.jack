// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    
    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192){
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;
        let address = ((32 * y) + (x / 16));
        let mask = Math.twoToThe(x & 15);
        if (color) {
            let screen[address] = (screen[address] | mask);
        }
        else {
            let screen[address] = (screen[address] & (~mask));
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    // https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, sx, dy, sy, error, e2;
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        let dy = -dy;
        let error = dx + dy;
        if (x1 < x2) {
            let sx = 1;
        }
        else {
            let sx = -1;
        }
        if (y1 < y2) {
            let sy = 1;
        }
        else {
            let sy = -1;
        }
        while (~((x1 = x2) & (y1 = y2))) {
            do Screen.drawPixel(x1, y1);
            let e2 = error + error;
            if (~(e2 < dy)){
                let error = error + dy;
                let x1 = x1 + sx;
            }
            if (~(e2 > dx)) {
                let error = error + dx;
                let y1 = y1 + sy;
            }
        }
        do Screen.drawPixel(x1, y1);
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 = y2)){
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        do Screen.drawLine(x1, y1, x2, y1);
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    // https://en.wikipedia.org/wiki/Midpoint_circle_algorithm
    function void drawCircle(int x, int y, int r) {
        var int cx, cy, radiusError;
        let cx = r;
        let cy = 0;
        let radiusError = 1 - cx;
        while (~(cx < cy)){
            do Screen.drawLine(x - cx, y + cy, x + cx, y + cy);
            do Screen.drawLine(x - cx, y - cy, x + cx, y - cy);
            do Screen.drawLine(x - cy, y + cx, x + cy, y + cx);
            do Screen.drawLine(x - cy, y - cx, x + cy, y - cx);
            let cy = cy + 1;
            if (radiusError < 0) {
                let radiusError = radiusError + (2 * cy) + 1;
            }
            else {
                let cx = cx - 1;
                let radiusError = radiusError + (2 * (cy - cx + 1));
            }
        }
        return;
    }
} 
